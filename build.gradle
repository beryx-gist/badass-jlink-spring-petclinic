import org.ajoberstar.grgit.*
plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.javamodularity.moduleplugin" version "1.6.0"
    id "org.beryx.jlink" version "2.17.2"
    id "org.ajoberstar.grgit" version "4.0.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

defaultTasks 'clean', 'jlinkZip'

configurations {
   springAutoConfig { transitive = false }
}

dependencies {
    springAutoConfig 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.hsqldb:hsqldb'
    implementation 'javax.cache:cache-api'
    implementation 'org.ehcache:ehcache'

    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:jquery:2.2.4'
    implementation 'org.webjars:jquery-ui:1.11.4'
    implementation 'org.webjars:bootstrap:3.3.6'
}

mainClassName = 'org.springframework.samples.petclinic.PetClinicApplication'

// This task clones the spring-petclinic project and adds module-info.java to it.
// The commitId is configured in gradle.properties.
task clonePetclinic {
    def cloneDir = "$buildDir/clone"
    outputs.dir(cloneDir)
    inputs.property("commitId", commitId)
    doLast {
        project.logger.info("Deleting ${cloneDir}...")
        delete(cloneDir)
        project.logger.info("Cloning spring-petclinic...")
        def grgit = Grgit.clone(dir: cloneDir, uri: "https://github.com/spring-projects/spring-petclinic.git")
        project.logger.debug("grgit: $grgit")
        project.logger.info("Resolving commit $commitId")
        def commitObj = grgit.resolve.toCommit(commitId)
        project.logger.debug("commitObj: $commitObj")
        grgit.reset(commit: commitObj, mode: 'soft')
        copy {
            from 'resources/module-info.java'
            into "$cloneDir/src/main/java"
        }
        ant.move file: "$cloneDir/src", todir: "."
    }
}

compileJava.dependsOn 'clonePetclinic'
tasks.jar.enabled = true

prepareMergedJarsDir.doLast {
    // extract META-INF/spring.factories from spring-boot-autoconfigure
    copy {
        from zipTree(configurations.springAutoConfig.singleFile).matching {
            include 'META-INF/spring.factories'
        }
        into jlinkBasePath
    }

    // insert META-INF/spring.factories into the main jar
    ant.zip(update: "true", destfile: jar.archivePath, keepcompression: true) {
        fileset(dir: "$jlinkBasePath", includes: 'META-INF/**')
    }
}

jlink {
    imageZip = file("$buildDir/image-zip/spring-petclinic-image.zip")
    forceMerge 'jaxb-api', 'byte-buddy', 'classgraph'
    
    mergedModule {
        uses 'ch.qos.logback.classic.spi.Configurator'
        uses 'javax.validation.valueextraction.ValueExtractor'
        uses 'javax.validation.ConstraintValidator'

        uses 'org.ehcache.core.spi.service.ServiceFactory'
        uses 'org.ehcache.xml.CacheManagerServiceConfigurationParser'
        uses 'org.ehcache.xml.CacheServiceConfigurationParser'
        
        uses 'org.hibernate.integrator.spi.Integrator'
        uses 'org.hibernate.boot.registry.selector.StrategyRegistrationProvider'
        uses 'org.hibernate.service.spi.ServiceContributor'
        uses 'org.hibernate.boot.spi.MetadataSourcesContributor'
        uses 'org.hibernate.boot.spi.MetadataBuilderInitializer'
        uses 'org.hibernate.boot.spi.MetadataBuilderFactory'
        uses 'org.hibernate.boot.model.TypeContributor'
        uses 'org.hibernate.boot.spi.MetadataContributor'
        uses 'org.hibernate.boot.spi.AdditionalJaxbMappingProducer'
        uses 'org.hibernate.boot.spi.SessionFactoryBuilderFactory'
        uses 'org.hibernate.service.spi.SessionFactoryServiceContributor'
                        
        excludeRequires 'com.fasterxml.jackson.module.paramnames'
        excludeProvides implementation: 'com.sun.xml.bind.v2.ContextFactory'
        excludeProvides servicePattern: 'javax.enterprise.inject.*'
        excludeProvides service: 'org.apache.logging.log4j.spi.Provider'        
    }

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        jvmArgs = [
            '--add-opens', 'java.base/java.lang=spring.petclinic.merged.module',
            '--add-opens', 'java.base/java.io=spring.petclinic.merged.module',
            '-cp', 'config/',
            '-Dspring.datasource.schema=file:config/db/hsqldb/schema.sql',
            '-Dspring.datasource.data=file:config/db/hsqldb/data.sql',
            '-Dspring.jpa.hibernate.ddl-auto=none',
            '-Dspring.messages.basename=messages/messages'
        ]
    }
}


tasks.jlink.doLast {
    // Spring performs its magic by scanning the classpath, but in a modular application the classpath is replaced by the module-path.
    // To circumvent this problem, we copy all resources into the 'config' directory and set this directory as classpath.
    copy {
        from "src/main/resources"
        into "$imageDir.asFile/bin/config"
    }
    copy {
        from 'resources/css'
        into "$imageDir.asFile/bin/config/static/resources/css"
    }
    // Spring also needs to read the .class files, therefore they should be accessible via classpath.
    // Note: These .class files are only used as resources, they will not be loaded by a classloader.
    copy {
        from "$buildDir/classes/java/main/org/springframework/samples/petclinic"
        into "$imageDir.asFile/bin/config/org/springframework/samples/petclinic/for-spring-classpath-scanner"
    }
}
